package charmap

import (
	"bytes"
	"testing"
	"unicode/utf8"
)

var testData = []struct {
	ucp rune
	cp  uint8
}{
	{0x0000, 0x00},
	{0x0001, 0x01},
	{0x0002, 0x02},
	{0x0003, 0x03},
	{0x0004, 0x37},
	{0x0005, 0x2d},
	{0x0006, 0x2e},
	{0x0007, 0x2f},
	{0x0008, 0x16},
	{0x0009, 0x05},
	{0x000A, 0x25},
	{0x000B, 0x0b},
	{0x000C, 0x0c},
	{0x000D, 0x0d},
	{0x000E, 0x0e},
	{0x000F, 0x0f},
	{0x0010, 0x10},
	{0x0011, 0x11},
	{0x0012, 0x12},
	{0x0013, 0x13},
	{0x0014, 0x3c},
	{0x0015, 0x3d},
	{0x0016, 0x32},
	{0x0017, 0x26},
	{0x0018, 0x18},
	{0x0019, 0x19},
	{0x001A, 0x3f},
	{0x001B, 0x27},
	{0x001C, 0x1c},
	{0x001D, 0x1d},
	{0x001E, 0x1e},
	{0x001F, 0x1f},
	{0x0020, 0x40},
	{0x0021, 0x5a},
	{0x0022, 0x7f},
	{0x0023, 0x7b},
	{0x0024, 0x5b},
	{0x0025, 0x6c},
	{0x0026, 0x50},
	{0x0027, 0x7d},
	{0x0028, 0x4d},
	{0x0029, 0x5d},
	{0x002A, 0x5c},
	{0x002B, 0x4e},
	{0x002C, 0x6b},
	{0x002D, 0x60},
	{0x002E, 0x4b},
	{0x002F, 0x61},
	{0x0030, 0xf0},
	{0x0031, 0xf1},
	{0x0032, 0xf2},
	{0x0033, 0xf3},
	{0x0034, 0xf4},
	{0x0035, 0xf5},
	{0x0036, 0xf6},
	{0x0037, 0xf7},
	{0x0038, 0xf8},
	{0x0039, 0xf9},
	{0x003A, 0x7a},
	{0x003B, 0x5e},
	{0x003C, 0x4c},
	{0x003D, 0x7e},
	{0x003E, 0x6e},
	{0x003F, 0x6f},
	{0x0040, 0x7c},
	{0x0041, 0xc1},
	{0x0042, 0xc2},
	{0x0043, 0xc3},
	{0x0044, 0xc4},
	{0x0045, 0xc5},
	{0x0046, 0xc6},
	{0x0047, 0xc7},
	{0x0048, 0xc8},
	{0x0049, 0xc9},
	{0x004A, 0xd1},
	{0x004B, 0xd2},
	{0x004C, 0xd3},
	{0x004D, 0xd4},
	{0x004E, 0xd5},
	{0x004F, 0xd6},
	{0x0050, 0xd7},
	{0x0051, 0xd8},
	{0x0052, 0xd9},
	{0x0053, 0xe2},
	{0x0054, 0xe3},
	{0x0055, 0xe4},
	{0x0056, 0xe5},
	{0x0057, 0xe6},
	{0x0058, 0xe7},
	{0x0059, 0xe8},
	{0x005A, 0xe9},
	{0x005C, 0xe0},
	{0x005E, 0xb0},
	{0x005F, 0x6d},
	{0x0060, 0x79},
	{0x007B, 0xc0},
	{0x007C, 0x4f},
	{0x007D, 0xd0},
	{0x007E, 0xa1},
	{0x007F, 0x07},
	{0x0080, 0x20},
	{0x0081, 0x21},
	{0x0082, 0x22},
	{0x0083, 0x23},
	{0x0084, 0x24},
	{0x0085, 0x15},
	{0x0086, 0x06},
	{0x0087, 0x17},
	{0x0088, 0x28},
	{0x0089, 0x29},
	{0x008A, 0x2a},
	{0x008B, 0x2b},
	{0x008C, 0x2c},
	{0x008D, 0x09},
	{0x008E, 0x0a},
	{0x008F, 0x1b},
	{0x0090, 0x30},
	{0x0091, 0x31},
	{0x0092, 0x1a},
	{0x0093, 0x33},
	{0x0094, 0x34},
	{0x0095, 0x35},
	{0x0096, 0x36},
	{0x0097, 0x08},
	{0x0098, 0x38},
	{0x0099, 0x39},
	{0x009A, 0x3a},
	{0x009B, 0x3b},
	{0x009C, 0x04},
	{0x009D, 0x14},
	{0x009E, 0x3e},
	{0x009F, 0xff},
	{0x00A2, 0x4a},
	{0x00AC, 0x5f},
	{0xFF61, 0x41},
	{0xFF62, 0x42},
	{0xFF63, 0x43},
	{0xFF64, 0x44},
	{0xFF65, 0x45},
	{0xFF66, 0x46},
	{0xFF67, 0x47},
	{0xFF68, 0x48},
	{0xFF69, 0x49},
	{0xFF6A, 0x51},
	{0xFF6B, 0x52},
	{0xFF6C, 0x53},
	{0xFF6D, 0x54},
	{0xFF6E, 0x55},
	{0xFF6F, 0x56},
	{0xFF70, 0x58},
	{0xFF71, 0x81},
	{0xFF72, 0x82},
	{0xFF73, 0x83},
	{0xFF74, 0x84},
	{0xFF75, 0x85},
	{0xFF76, 0x86},
	{0xFF77, 0x87},
	{0xFF78, 0x88},
	{0xFF79, 0x89},
	{0xFF7A, 0x8a},
	{0xFF7B, 0x8c},
	{0xFF7C, 0x8d},
	{0xFF7D, 0x8e},
	{0xFF7E, 0x8f},
	{0xFF7F, 0x90},
	{0xFF80, 0x91},
	{0xFF81, 0x92},
	{0xFF82, 0x93},
	{0xFF83, 0x94},
	{0xFF84, 0x95},
	{0xFF85, 0x96},
	{0xFF86, 0x97},
	{0xFF87, 0x98},
	{0xFF88, 0x99},
	{0xFF89, 0x9a},
	{0xFF8A, 0x9d},
	{0xFF8B, 0x9e},
	{0xFF8C, 0x9f},
	{0xFF8D, 0xa2},
	{0xFF8E, 0xa3},
	{0xFF8F, 0xa4},
	{0xFF90, 0xa5},
	{0xFF91, 0xa6},
	{0xFF92, 0xa7},
	{0xFF93, 0xa8},
	{0xFF94, 0xa9},
	{0xFF95, 0xaa},
	{0xFF96, 0xac},
	{0xFF97, 0xad},
	{0xFF98, 0xae},
	{0xFF99, 0xaf},
	{0xFF9A, 0xba},
	{0xFF9B, 0xbb},
	{0xFF9C, 0xbc},
	{0xFF9D, 0xbd},
	{0xFF9E, 0xbe},
	{0xFF9F, 0xbf},
}

func TestEncoder(t *testing.T) {
	enc := EBCDIC_K.NewEncoder()
	for _, pair := range testData {
		utf8bytes := make([]byte, 3)
		n := utf8.EncodeRune(utf8bytes, pair.ucp)
		utf8bytes = utf8bytes[0:n]

		result, err := enc.Bytes(utf8bytes)
		if err != nil {
			t.Fatal(err)
		}
		expected := []byte{pair.cp}
		if bytes.Compare(expected, result) != 0 {
			t.Logf("%v != %v", expected, result)
			t.Fail()
		}
	}
}

func TestDecoder(t *testing.T) {
	dec := EBCDIC_K.NewDecoder()
	for _, pair := range testData {
		expected := make([]byte, 3)
		n := utf8.EncodeRune(expected, pair.ucp)
		expected = expected[0:n]

		result, err := dec.Bytes([]byte{pair.cp})
		if err != nil {
			t.Fatal(err)
		}
		if bytes.Compare(expected, result) != 0 {
			t.Logf("%v != %v", expected, result)
			t.Fail()
		}
	}
}
